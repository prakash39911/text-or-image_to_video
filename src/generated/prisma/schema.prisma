// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model UserData {
  id                  String                @id @default(cuid())
  name                String
  email               String                @unique
  emailVerified       DateTime?
  password            String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  videoGenerationData videoGenerationData[]
}

model videoGenerationData {
  id                    String                @id @default(cuid())
  userPrompt            String
  status                videoGenerationStatus @default(InProgress)
  imageTaskId           String?               @unique
  videoTaskId           String?               @unique
  mergeAudioVideoTaskID String?               @unique
  musicPrompt           String?
  caption               String?
  imageUrl              String?
  videoUrl              String?
  videoPublicId         String?
  musicPublicId         String?
  musicUrl              String?
  finalVideoUrl         String?
  finalVideoPublicId    String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  userDataId            String
  UserData              UserData              @relation(fields: [userDataId], references: [id])
}

enum videoGenerationStatus {
  InProgress
  Completed
  Failed
}

model token {
  id      String    @id @default(cuid())
  email   String
  token   String
  expires DateTime
  type    tokenType

  @@unique([email, token])
}

enum tokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}
